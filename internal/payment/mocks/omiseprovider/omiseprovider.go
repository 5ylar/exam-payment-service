// Code generated by MockGen. DO NOT EDIT.
// Source: internal/payment/payment.go

// Package mock_payment is a generated GoMock package.
package mock_payment

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	omise "github.com/omise/omise-go"
	operations "github.com/omise/omise-go/operations"
)

// MockOmiseProvider is a mock of omiseProvider interface.
type MockOmiseProvider struct {
	ctrl     *gomock.Controller
	recorder *MockOmiseProviderMockRecorder
}

// MockOmiseProviderMockRecorder is the mock recorder for MockOmiseProvider.
type MockOmiseProviderMockRecorder struct {
	mock *MockOmiseProvider
}

// NewMockOmiseProvider creates a new mock instance.
func NewMockOmiseProvider(ctrl *gomock.Controller) *MockOmiseProvider {
	mock := &MockOmiseProvider{ctrl: ctrl}
	mock.recorder = &MockOmiseProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOmiseProvider) EXPECT() *MockOmiseProviderMockRecorder {
	return m.recorder
}

// CreateCharge mocks base method.
func (m *MockOmiseProvider) CreateCharge(createCharge operations.CreateCharge) (omise.Charge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCharge", createCharge)
	ret0, _ := ret[0].(omise.Charge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCharge indicates an expected call of CreateCharge.
func (mr *MockOmiseProviderMockRecorder) CreateCharge(createCharge interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCharge", reflect.TypeOf((*MockOmiseProvider)(nil).CreateCharge), createCharge)
}

// CreateSource mocks base method.
func (m *MockOmiseProvider) CreateSource(createSource operations.CreateSource) (omise.Source, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSource", createSource)
	ret0, _ := ret[0].(omise.Source)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSource indicates an expected call of CreateSource.
func (mr *MockOmiseProviderMockRecorder) CreateSource(createSource interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSource", reflect.TypeOf((*MockOmiseProvider)(nil).CreateSource), createSource)
}
